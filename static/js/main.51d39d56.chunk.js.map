{"version":3,"sources":["App.js","CalculatorKey.js","reportWebVitals.js","index.js"],"names":["App","useState","preValue","SetPreValue","postValue","SetPostValue","operation","SetOperation","ansStatus","SetAnsStatus","operStatus","SetOperStatus","clearAllData","Handlecalculate","val","console","log","Number","isInteger","parseInt","test","toString","eval","className","id","keyValue","onClick","CalculatorKey","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51d39d56.chunk.js","sourcesContent":["import './App.css';\nimport { Container, Row, Col } from 'reactstrap';\nimport CalculatorKey from './CalculatorKey';\nimport { useEffect, useState } from 'react';\n\nconst App = () => {\n\n  const [preValue, SetPreValue] = useState(0);\n  const [postValue, SetPostValue] = useState(0);\n  const [operation, SetOperation] = useState(null);\n  const [ansStatus, SetAnsStatus] = useState(false);\n  const [operStatus, SetOperStatus] = useState(false);\n  const clearAllData = () => {\n    SetPreValue(0);\n    SetPostValue(0);\n    SetOperation(null);\n  }\n  const Handlecalculate = (val) => {\n    console.log(val);\n    if (Number.isInteger(parseInt(val))) {\n      if (ansStatus == false && !/\\./.test(postValue))\n        SetPostValue(postValue * 10 + parseInt(val));\n      else if (ansStatus == false && /\\./.test(postValue))\n        SetPostValue(postValue + val.toString());\n      else {\n        SetPostValue(val);\n        SetAnsStatus(false);\n      }\n    }\n    else if (val == 'AC') {\n      clearAllData();\n    }\n    else if (val == 'C') {\n      SetPostValue(0);\n    }\n    else if (val == '\\xb1') {\n      SetPostValue(-1 * postValue);\n    }\n    else if (val == '%') {\n      SetPostValue(0.01 * postValue);\n    }\n    else if (val == '+' || val == '-' || val == '×' || val == '÷') {\n      SetAnsStatus(false);\n      if (val == '×') {\n        val = '*';\n      }\n      if (val == '÷') {\n        val = '/';\n      }\n      SetOperation(val);\n      if (preValue != 0 && postValue!=0) {\n        SetPreValue(eval('(' + preValue.toString() + ')' + operation.toString() + '(' + postValue.toString() + ')'));\n        SetPostValue(0);\n      }\n      else if (preValue == 0) {\n        SetPreValue(postValue);\n        SetPostValue(0);\n      }\n    }\n    else if (val == '=') {\n      SetAnsStatus(true);\n      if (operation == null) {\n        SetPostValue(preValue);\n\n      }\n      else {\n        SetPostValue(eval('(' + preValue.toString() + ')' + operation.toString() + '(' + postValue.toString() + ')'));\n        console.log(preValue.toString() + operation.toString() + postValue.toString());\n      }\n      SetPreValue(0);\n      SetOperation(null);\n    }\n    else if (val == '.') {\n      if (!/\\./.test(postValue)) {\n        SetAnsStatus(false);\n        SetPostValue(postValue + \".\");\n      }\n    }\n  }\n\n\n\n  return (\n    <Container className='Calculator'>\n      {/*<Row className='test'><Col>{postValue}</Col><Col>{operation}</Col><Col>{preValue}</Col></Row>*/}\n      <div id='result' className='Input text-right justify-content-end'>{postValue}</div>\n      <Row >\n        <CalculatorKey className='cbt btspecail col' keyValue='AC' onClick={Handlecalculate} />\n        <CalculatorKey className='cbt btspecail col' keyValue='C' onClick={Handlecalculate} />\n        <CalculatorKey className='cbt btoperation col' keyValue={'\\xb1'} onClick={Handlecalculate} />\n        <CalculatorKey className='cbt btoperation col' keyValue='%' onClick={Handlecalculate} />\n      </Row>\n      <Row >\n        <CalculatorKey className='cbt btnumber col' keyValue='7' onClick={Handlecalculate} />\n        <CalculatorKey className='cbt btnumber col' keyValue='8' onClick={Handlecalculate} />\n        <CalculatorKey className='cbt btnumber col' keyValue='9' onClick={Handlecalculate} />\n        <CalculatorKey className='cbt btoperation col' keyValue='+' onClick={Handlecalculate} />\n      </Row>\n      <Row >\n        <CalculatorKey className='cbt btnumber col' keyValue='4' onClick={Handlecalculate} />\n        <CalculatorKey className='cbt btnumber col' keyValue='5' onClick={Handlecalculate} />\n        <CalculatorKey className='cbt btnumber col' keyValue='6' onClick={Handlecalculate} />\n        <CalculatorKey className='cbt btoperation col' keyValue='-' onClick={Handlecalculate} />\n      </Row>\n      <Row >\n        <CalculatorKey className='cbt btnumber col' keyValue='1' onClick={Handlecalculate} />\n        <CalculatorKey className='cbt btnumber col' keyValue='2' onClick={Handlecalculate} />\n        <CalculatorKey className='cbt btnumber col' keyValue='3' onClick={Handlecalculate} />\n        <CalculatorKey className='cbt btoperation col' keyValue='×' onClick={Handlecalculate} />\n      </Row>\n      <Row >\n        <CalculatorKey className='cbt btnumber col' keyValue='0' onClick={Handlecalculate} />\n        <CalculatorKey className='cbt btnumber col' keyValue='.' onClick={Handlecalculate} />\n        <CalculatorKey className='cbt btoperation col' keyValue='=' onClick={Handlecalculate} />\n        <CalculatorKey className='cbt btoperation col' keyValue='÷' onClick={Handlecalculate} />\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react'\r\nimport './CalculatorKey.css';\r\nconst CalculatorKey = (props) => {\r\n    return (\r\n        <button\r\n            className={props.className}\r\n            onClick={() => props.onClick(props.keyValue)}\r\n            >{props.keyValue}</button>\r\n    )\r\n};\r\n\r\nexport default CalculatorKey;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <h1>計算機 by Jesse</h1>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}